#!/bin/bash

# Mapsforge map creation (with coastlines)
# using OpenStreetMap data from Geofabrik
#
# https://github.com/mapsforge/mapsforge/blob/master/docs/MapCreation.md
#
# Written by devemux86

# Configuration

# http://wiki.openstreetmap.org/wiki/Osmosis
[ $OSMOSIS_HOME ] || OSMOSIS_HOME="$HOME/programs/osmosis"

[ $DATA_PATH ] || DATA_PATH="$HOME/mapsforge/data"

[ $MAPS_PATH ] || MAPS_PATH="$HOME/mapsforge/maps"

[ $POIS_PATH ] || POIS_PATH="$HOME/mapsforge/pois"

[ $PROGRESS_LOGS ] || PROGRESS_LOGS="true"

[ $TAG_VALUES ] || TAG_VALUES="false"

[ $THREADS ] || THREADS="1"

[ $DAYS ] || DAYS="30"

# =========== DO NOT CHANGE AFTER THIS LINE. ===========================
# Below here is regular code, part of the file. This is not designed to
# be modified by users.
# ======================================================================

if [ $# -lt 2 ]; then
  echo "Usage: $0 continent/country[/region] ram|hd [lang,...]"
  echo "Example: $0 europe/germany/berlin ram en,de,fr,es"
  exit
fi

cd "$(dirname "$0")"

NAME="$(basename "$1")"

WORK_PATH="$DATA_PATH/$1"

if [ "$TAG_VALUES" = "true" ]; then
  MAPS_PATH="$MAPS_PATH/v5"
else
  [ $3 ] && MAPS_PATH="$MAPS_PATH/v4" || MAPS_PATH="$MAPS_PATH/v3"
fi
MAPS_PATH="$(dirname "$MAPS_PATH/$1")"

POIS_PATH="$(dirname "$POIS_PATH/$1")"

# Check map date
if [ -f "$MAPS_PATH/$NAME.map" ]; then
  if [ $(find "$MAPS_PATH/$NAME.map" -mtime -$DAYS) ]; then
    echo "$MAPS_PATH/$NAME.map exists and is newer than $DAYS days."
    exit
  fi
fi

# Pre-process
rm -rf "$WORK_PATH"
mkdir -p "$WORK_PATH"

if [ "$SKIP_MAP_CREATION" != "true" ]; then
  mkdir -p "$MAPS_PATH"
fi

if [ "$SKIP_POI_CREATION" != "true" ]; then
  mkdir -p "$POIS_PATH"
fi

# Download land
if [ -f "$DATA_PATH/land-polygons-split-4326/land_polygons.shp" ] && [ $(find "$DATA_PATH/land-polygons-split-4326/land_polygons.shp" -mtime -$DAYS) ]; then
  echo "Land polygons exist and are newer than $DAYS days."
else
  echo "Downloading land polygons..."
  rm -rf "$DATA_PATH/land-polygons-split-4326"
  rm -f "$DATA_PATH/land-polygons-split-4326.zip"
  wget -nv -N -P "$DATA_PATH" https://osmdata.openstreetmap.de/download/land-polygons-split-4326.zip || exit 1
  unzip -oq "$DATA_PATH/land-polygons-split-4326.zip" -d "$DATA_PATH"
fi

#Name override
if [ "$FILE_NAME" == "" ]; then
  FILE_NAME=$1
  FILE_BASE=$NAME
else
  FILE_BASE="$(basename "$FILE_NAME")"
fi

# Download data
echo "Downloading $1..."
wget -nv -N -P "$WORK_PATH" https://download.geofabrik.de/$FILE_NAME-latest.osm.pbf || exit 1
wget -nv -N -P "$WORK_PATH" https://download.geofabrik.de/$FILE_NAME-latest.osm.pbf.md5 || exit 1
(cd "$WORK_PATH" && exec md5sum -c "$FILE_BASE-latest.osm.pbf.md5") || exit 1
wget -nv -N -P "$WORK_PATH" https://download.geofabrik.de/$FILE_NAME.poly || exit 1

# Bounds
if [ "$BBOX" == "" ]; then
  BBOX=$(perl poly2bb.pl "$WORK_PATH/$FILE_BASE.poly")
fi

MAX_LAT=73
MIN_LAT=-73

BBOX=(${BBOX//,/ })
LEFT=${BBOX[1]}
RIGHT=${BBOX[3]}

if (( ${BBOX[0]%.*} > $MIN_LAT )); then
  BOTTOM=${BBOX[0]}
else
  BOTTOM=$MIN_LAT
fi

if (( ${BBOX[2]%.*} < $MAX_LAT )); then
  TOP=${BBOX[2]}
else
  TOP=$MAX_LAT
fi

# Write bounds file
echo $LEFT $BOTTOM $RIGHT $TOP >> $WORK_PATH/$NAME-extent.txt

if [ "$S3_BUCKET" != "" ]; then
  CMD="aws s3 cp $WORK_PATH/$NAME-extent.txt s3://$S3_BUCKET/$1-extent.txt"
  echo $CMD
  $CMD
fi

# Land
ogr2ogr -overwrite -progress -skipfailures -clipsrc $LEFT $BOTTOM $RIGHT $TOP "$WORK_PATH/land.shp" "$DATA_PATH/land-polygons-split-4326/land_polygons.shp"
python shape2osm.py -l "$WORK_PATH/land" "$WORK_PATH/land.shp"

# Sea
cp sea.osm "$WORK_PATH"
sed -i "s/\$BOTTOM/$BOTTOM/g" "$WORK_PATH/sea.osm"
sed -i "s/\$LEFT/$LEFT/g" "$WORK_PATH/sea.osm"
sed -i "s/\$TOP/$TOP/g" "$WORK_PATH/sea.osm"
sed -i "s/\$RIGHT/$RIGHT/g" "$WORK_PATH/sea.osm"

# Merge
CMD="$OSMOSIS_HOME/bin/osmosis --rb file=$WORK_PATH/$FILE_BASE-latest.osm.pbf \
                               --rx file=$WORK_PATH/sea.osm --s --m"
for f in $WORK_PATH/land*.osm; do
  CMD="$CMD --rx file=$f --s --m"
done
CMD="$CMD --wb file=$WORK_PATH/merge.pbf omitmetadata=true"
echo $CMD
$CMD

# Map
if [ "$SKIP_MAP_CREATION" != "true" ]; then
  CMD="$OSMOSIS_HOME/bin/osmosis --rb file=$WORK_PATH/merge.pbf"
  [ $MAP_TRANSFORM_FILE ] && CMD="$CMD --tt file=$MAP_TRANSFORM_FILE"
  CMD="$CMD --mw file=$WORK_PATH/$NAME.map \
                 type=$2 \
                 bbox=$BOTTOM,$LEFT,$TOP,$RIGHT \
                 map-start-zoom=8 \
                 polylabel=true \
                 tag-values=$TAG_VALUES \
                 threads=$THREADS \
                 progress-logs=$PROGRESS_LOGS"
  [ $3 ] && CMD="$CMD preferred-languages=$3"
  [ $MAP_TAG_CONF_FILE ] && CMD="$CMD tag-conf-file=$MAP_TAG_CONF_FILE"
  echo $CMD
  $CMD || exit 1

  # Check map size
  if [ -f "$MAPS_PATH/$NAME.map" ]; then
    OLD_SIZE=$(wc -c < "$MAPS_PATH/$NAME.map")
    NEW_SIZE=$(wc -c < "$WORK_PATH/$NAME.map")
    if [ $NEW_SIZE -lt $(($OLD_SIZE * 70 / 100)) ]; then
      echo "$WORK_PATH/$NAME.map creation is significantly smaller."
      exit 1
    fi
  fi
  mv "$WORK_PATH/$NAME.map" "$MAPS_PATH/$NAME.map"

  # Post-process
  if [ "$S3_BUCKET" != "" ]; then
    CMD="aws s3 cp $MAPS_PATH/$NAME.map s3://$S3_BUCKET/$1.map"
    echo $CMD
    $CMD
  fi
fi

# POI
if [ "$SKIP_POI_CREATION" != "true" ]; then
  CMD="$OSMOSIS_HOME/bin/osmosis --rb file=$WORK_PATH/$NAME-latest.osm.pbf \
                                 --pw file=$WORK_PATH/$NAME.poi \
                                      progress-logs=$PROGRESS_LOGS"
  [ $POI_TAG_CONF_FILE ] && CMD="$CMD tag-conf-file=$POI_TAG_CONF_FILE"
  echo $CMD
  $CMD || exit 1
  mv "$WORK_PATH/$NAME.poi" "$POIS_PATH/$NAME.poi"
fi

rm -rf "$WORK_PATH"
